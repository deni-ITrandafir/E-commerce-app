/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2025-01-09 23:44:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.user;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import java.util.Map;

public final class cart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Map");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    List<Map<String, String>> cartProducts = (List<Map<String, String>>) request.getAttribute("cartProducts");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Cos de cumparaturi</title>\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"/ddeStore/css/user.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("    	.list-group-item:hover {\r\n");
      out.write("		    background-color: #495057; \r\n");
      out.write("		    color: #f8f9fa;\r\n");
      out.write("		}\r\n");
      out.write("		.btn-warning:hover {\r\n");
      out.write("		    background-color: #e0a800;\r\n");
      out.write("		}\r\n");
      out.write("		.btn-danger:hover {\r\n");
      out.write("		    background-color: #bd2130;\r\n");
      out.write("		}\r\n");
      out.write("		.btn-remove-circle {\r\n");
      out.write("		    display: inline-flex;\r\n");
      out.write("		    justify-content: center;\r\n");
      out.write("		    align-items: center;\r\n");
      out.write("		    width: 40px;\r\n");
      out.write("		    height: 40px;\r\n");
      out.write("		    background-color: #dc3545;  \r\n");
      out.write("		    color: #fff;  \r\n");
      out.write("		    border-radius: 50%; \r\n");
      out.write("		    cursor: pointer;\r\n");
      out.write("		    transition: background-color 0.3s;\r\n");
      out.write("		    padding: 10px;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.btn-remove-circle:hover {\r\n");
      out.write("		    background-color: #bd2130; \r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.border-top-white {\r\n");
      out.write("		    border-top: 1px solid white !important;\r\n");
      out.write("		    border-bottom: 0; \r\n");
      out.write("		    border-right: 0;\r\n");
      out.write("		    border-left: 0;\r\n");
      out.write("		    padding: 15px;\r\n");
      out.write("		}\r\n");
      out.write("		.border-bottom-white {\r\n");
      out.write("		    border-bottom: 1px solid white ; \r\n");
      out.write("		    border-right: 0;\r\n");
      out.write("		    border-left: 0;\r\n");
      out.write("		}\r\n");
      out.write("        .cart-item {\r\n");
      out.write("		    display: flex;\r\n");
      out.write("		    align-items: center;\r\n");
      out.write("		    justify-content: space-between;\r\n");
      out.write("		    border: none;  \r\n");
      out.write("		    background-color: #f8f9fa;  \r\n");
      out.write("		    border-radius: 10px;  \r\n");
      out.write("		    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);  \r\n");
      out.write("		    padding: 15px;\r\n");
      out.write("		    margin-bottom: 10px;  \r\n");
      out.write("		}\r\n");
      out.write("        .cart-item:last-child {\r\n");
      out.write("            border-bottom: none;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .cart-item img {\r\n");
      out.write("            max-width: 100px;\r\n");
      out.write("            margin-right: 20px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .cart-item-details {\r\n");
      out.write("            flex: 2;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .cart-item-quantity {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            gap: 10px;\r\n");
      out.write("            flex: 1;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .quantity-btn {\r\n");
      out.write("            background-color: #f0f0f0;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            padding: 5px 10px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .quantity-btn:hover {\r\n");
      out.write("            background-color: #ddd;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .cart-item-actions {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            flex: 1;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-remove {\r\n");
      out.write("            color: red;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .btn-remove:hover {\r\n");
      out.write("            text-decoration: underline;\r\n");
      out.write("        }\r\n");
      out.write("        .card {\r\n");
      out.write("		    margin-top: 60px;\r\n");
      out.write("		    gap: 20px; \r\n");
      out.write("		}\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container-fluid\">\r\n");
      out.write("        <div class=\"row\">\r\n");
      out.write("            <!-- Sidebar -->\r\n");
      out.write("            <div class=\"col-md-2 bg-dark text-light p-3\" style=\"height: 100vh;\">\r\n");
      out.write("                <div class=\"container-fluid\">\r\n");
      out.write("                    <a class=\"navbar-brand\" href=\"/ddeStore/ProductFilterServlet\">\r\n");
      out.write("                        <img src=\"/ddeStore/assets/logo2.jpg\" alt=\"Logo\" style=\"width: 150px; height:auto; margin-bottom:25px;\">\r\n");
      out.write("                    </a>\r\n");
      out.write("                </div>\r\n");
      out.write("                \r\n");
      out.write("                <ul class=\"list-group bg-dark\">\r\n");
      out.write("                    <li class=\"list-group-item bg-dark text-light border-top-white\">\r\n");
      out.write("                        <a href=\"/ddeStore/CartServlet\" class=\"text-decoration-none text-light\">Cos de cumparaturi</a>\r\n");
      out.write("                    </li>\r\n");
      out.write("                    <li class=\"list-group-item bg-dark text-light border-top-white\">\r\n");
      out.write("                        <a href=\"/ddeStore/FavoritesServlet\" class=\"text-decoration-none text-light\">Lista favorite</a>\r\n");
      out.write("                    </li>\r\n");
      out.write("                    <li class=\"list-group-item bg-dark text-light border-top-white\">\r\n");
      out.write("                        <a href=\"/ddeStore/AccountDetailsServlet\" class=\"text-decoration-none text-light\">Detalii cont</a>\r\n");
      out.write("                    </li>\r\n");
      out.write("                    <li class=\"list-group-item bg-dark text-light border-top-white border-bottom-white\">\r\n");
      out.write("                        <a href=\"/ddeStore/HistoryOrdersServlet\" class=\"text-decoration-none text-light\">Istoric comenzi</a>\r\n");
      out.write("                    </li>\r\n");
      out.write("                </ul>\r\n");
      out.write("                <div class=\"text-center\" style=\"margin-top: 320px;\">\r\n");
      out.write("                    <a href=\"/ddeStore/ProductFilterServlet\" class=\"btn btn-warning w-100\">Inapoi la produse</a>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"text-center\" style=\"margin-top: 10px;\">\r\n");
      out.write("                    <a href=\"/ddeStore/logout\" class=\"btn btn-danger w-100\">Logout</a>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("            <!-- Main Content -->\r\n");
      out.write("            <div class=\"col-md-7 p-5\">\r\n");
      out.write("                <h2 class=\"mb-4\">Cosul tau de cumparaturi</h2>\r\n");
      out.write("	            ");
 if (cartProducts != null && !cartProducts.isEmpty()) { 
      out.write("\r\n");
      out.write("	                <div class=\"cart-list\">\r\n");
      out.write("	                    ");
 for (Map<String, String> product : cartProducts) { 
      out.write("\r\n");
      out.write("	                        <div class=\"cart-item\">\r\n");
      out.write("	                            <img src=\"");
      out.print( product.get("image") );
      out.write("\" alt=\"Produs\">\r\n");
      out.write("	                            <div class=\"cart-item-details\">\r\n");
      out.write("	                                <h5>");
      out.print( product.get("brand") );
      out.write(' ');
      out.write('-');
      out.write(' ');
      out.print( product.get("model") );
      out.write("</h5>\r\n");
      out.write("	                                <p><span class=\"cart-item-price\">");
      out.print( product.get("price") );
      out.write(" Lei</span></p>\r\n");
      out.write("	                            </div>\r\n");
      out.write("	                            <div class=\"cart-item-quantity\">\r\n");
      out.write("							        <button class=\"quantity-btn\" onclick=\"updateQuantity('");
      out.print( product.get("id") );
      out.write("', 'decrease')\">-</button>\r\n");
      out.write("							        <span>");
      out.print( product.get("quantity") );
      out.write("</span>\r\n");
      out.write("							        <button class=\"quantity-btn\" onclick=\"updateQuantity('");
      out.print( product.get("id") );
      out.write("', 'increase')\">+</button>\r\n");
      out.write("							    </div>\r\n");
      out.write("							    <div class=\"cart-item-actions\">\r\n");
      out.write("							        <span class=\"btn-remove-circle\" onclick=\"removeFromCart('");
      out.print( product.get("id") );
      out.write("')\">\r\n");
      out.write("									    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-6\">\r\n");
      out.write("									        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\" />\r\n");
      out.write("									    </svg>\r\n");
      out.write("									</span>\r\n");
      out.write("							    </div>\r\n");
      out.write("	                        </div>\r\n");
      out.write("	                    ");
 } 
      out.write("\r\n");
      out.write("	                </div>\r\n");
      out.write("	            ");
 } else { 
      out.write("\r\n");
      out.write("	                <p>Cosul tau este gol.</p>\r\n");
      out.write("	            ");
 } 
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("            \r\n");
      out.write("            <div class=\"col-md-3 p-5\">\r\n");
      out.write("			    <div class=\"card\">\r\n");
      out.write("			        <div class=\"card-body\">\r\n");
      out.write("			            <h4 class=\"card-title\">Sumar comanda</h4>\r\n");
      out.write("			            <hr>\r\n");
      out.write("			            ");
 
			                double totalPrice = 0;
			                if (cartProducts != null) {
			                    for (Map<String, String> product : cartProducts) {
			                        totalPrice += Double.parseDouble(product.get("price")) * Integer.parseInt(product.get("quantity"));
			                    }
			                }
			            
      out.write("\r\n");
      out.write("			            <p class=\"card-text\"><strong>Total:</strong> <span>");
      out.print( totalPrice );
      out.write(" Lei</span></p>\r\n");
      out.write("			            <hr>\r\n");
      out.write("			            <a href=\"/ddeStore/EditUserDetailsServlet?totalPrice=");
      out.print( totalPrice );
      out.write("\" class=\"btn btn-success w-100\">Finalizeaza Comanda</a>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("			        </div>\r\n");
      out.write("			    </div>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("    function updateQuantity(productId, action) {\r\n");
      out.write("        const formData = new URLSearchParams();\r\n");
      out.write("        formData.append(\"id\", productId);\r\n");
      out.write("        formData.append(\"action\", action);\r\n");
      out.write("\r\n");
      out.write("        fetch('/ddeStore/CartUpdateServlet', {\r\n");
      out.write("            method: 'POST',\r\n");
      out.write("            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n");
      out.write("            body: formData.toString(),\r\n");
      out.write("        })\r\n");
      out.write("            .then(response => response.json())\r\n");
      out.write("            .then(data => {\r\n");
      out.write("                if (data.success) {\r\n");
      out.write("                    location.reload(); // ReÃ®ncarcÄ pagina pentru actualizarea cantitÄÈilor\r\n");
      out.write("                } else {\r\n");
      out.write("                    alert(data.message || \"Eroare la actualizarea cantitÄtii.\");\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            .catch(error => {\r\n");
      out.write("                console.error(\"Eroare:\", error);\r\n");
      out.write("                alert(\"A aparut o eroare la server. Incercati din nou.\");\r\n");
      out.write("            });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function removeFromCart(productId) {\r\n");
      out.write("        const formData = new URLSearchParams();\r\n");
      out.write("        formData.append(\"id\", productId);\r\n");
      out.write("        formData.append(\"action\", \"remove\");\r\n");
      out.write("\r\n");
      out.write("        fetch('/ddeStore/CartUpdateServlet', {\r\n");
      out.write("            method: 'POST',\r\n");
      out.write("            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n");
      out.write("            body: formData.toString(),\r\n");
      out.write("        })\r\n");
      out.write("            .then(response => response.json())\r\n");
      out.write("            .then(data => {\r\n");
      out.write("                if (data.success) {\r\n");
      out.write("                    location.reload(); // ReÃ®ncarcÄ pagina pentru eliminarea produsului\r\n");
      out.write("                } else {\r\n");
      out.write("                    alert(data.message || \"Eroare la eliminarea produsului din cos.\");\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            .catch(error => {\r\n");
      out.write("                console.error(\"Eroare:\", error);\r\n");
      out.write("                alert(\"A aparut o eroare la server. Incercati din nou.\");\r\n");
      out.write("            });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
